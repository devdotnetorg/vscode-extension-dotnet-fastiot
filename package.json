{
	"name": "vscode-extension-dotnet-fastiot",
	"displayName": ".NET FastIoT",
	"description": "Configuring Remote Debugging of a .NET application for embedded Linux devices",
	"icon": "assets/fastiot-logo-256.png",
	"license": "LGPL-3.0-only",
	"preview": true,
	"version": "0.3.1",
	"publisher": "devdotnetorg",
	"private": "false",
	"identity": {
		"internalName": "vscode-extension-dotnet-fastiot"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"dotnet",
		"C#",
		"IoT",
		"Linux",
		"Embedded",
		"Raspberry",
		"Remote",
		"Debugging"
	],
	"engines": {
		"vscode": "^1.70.3"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot.git"
	},
	"homepage": "https://devdotnet.org",
	"bugs": {
		"url": "https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/issues",
		"email": "fastiot@devdotnet.org"
	},
	"activationEvents": [
		"onView:viewDevices"
	],
	"os": [
		"win32"
	],
	"recommendations": [
		"ms-dotnettools.csharp",
		"jmrog.vscode-nuget-package-manager",
		"plorefice.devicetree",
		"IBM.output-colorizer"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": [
			{
				"title": ".NET FastIoT",
				"properties": {
					"fastiot.device.account.username": {
						"type": "string",
						"default": "debugvscode",
						"markdownDescription": "Debug account name. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.device.account.groups": {
						"type": "string",
						"default": "sudo",
						"markdownDescription": "Linux group for a new user (debugvscode) of a development device. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.device.applicationdatafolder": {
						"type": "string",
						"default": "",
						"markdownDescription": "Shared folder for storing keys, templates. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.device.ssh.key.type": {
						"type": "string",
						"default": "ed25519",
						"markdownDescription": "Type of key generation algorithm for ssh. Can take values: ed25519 (default), ecdsa, dsa, rsa. Used to authenticate with a device after it has been added to the device list. Learn more about key algorithms see [How To Set Up SSH Keys](https://goteleport.com/blog/how-to-set-up-ssh-keys/). If you use the rsa key type, then you need to add the `PubkeyAcceptedAlgorithms=+ssh-rsa` line to the `/etc/ssh/sshd_config` file. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.device.ssh.key.bits": {
						"type": "number",
						"default": 256,
						"markdownDescription": "Key length in bits. Can take values: 256, 384, 521, 512, 1024, 2048, 3072, 4096. ED25519 only 256. ECDSA key length: valid lengths are 256, 384, 521, recommended 521. DSA only 1024. RSA key length: valid lengths are 1024, 2048, 3072, 4096, recommended 4096. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.device.pathfolderkeys": {
						"type": "string",
						"default": "C:\\RemoteCode\\keys",
						"description": "![Not used] Path to ssh key storage folder"
					},
					"fastiot.device.pathfoldercwrsync": {
						"type": "string",
						"default": "C:\\RemoteCode\\cwrsync",
						"markdownDescription": "![Not used] The folder with the [cwRsync](https://itefix.net/cwrsync) package to copy the application to a remote device and provide a transport for the debugger."
					},
					"fastiot.launch.templatetitle": {
						"type": "string",
						"default": "Launch on %{device.label} (%{project.name}, %{device.board.name}, %{device.user.debug})",
						"markdownDescription": "Template for creating a launch title. Variable names see [link](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Launch-title-template.md)."
					},
					"fastiot.device.all.JSON": {
						"type": "object",
						"default": {},
						"description": "Configuration of all devices in JSON format."
					},
					"fastiot.template.isupdate": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Update templates. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.template.updateinterval": {
						"type": "number",
						"default": 24,
						"markdownDescription": "Update interval in hours for templates. See [Extension settings](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Extension-settings.md)."
					},
					"fastiot.template.lastupdate": {
						"type": "number",
						"default": 0,
						"markdownDescription": "Number of hours since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time), i.e. Unix timestamp, until the templates were last updated."
					},
					"fastiot.template.loadonstart": {
						"type": "boolean",
						"default": true,
						"description": "Load templates on extension start (false, speeds up the start of the extension)."
					},
					"conf.resource.insertEmptyLastLine": {
						"type": "object",
						"default": {},
						"markdownDescription": "Resource configuration: Configure files using glob patterns to have an empty last line always",
						"scope": "resource"
					}
				}
			}
		],
		"commands": [
			{
				"command": "viewDevices.AddDevice",
				"title": "Add Device",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "viewDevices.RefreshDevices",
				"title": "Refresh"
			},
			{
				"command": "viewDevices.ExportDevices",
				"title": "Export"
			},
			{
				"command": "viewDevices.ImportDevices",
				"title": "Import"
			},
			{
				"command": "viewDevices.RenameDevice",
				"title": "Rename"
			},
			{
				"command": "viewDevices.DeleteDevice",
				"title": "Delete"
			},
			{
				"command": "viewDevices.ConnectionTestDevice",
				"title": "Connection test"
			},
			{
				"command": "viewDevices.RebootDevice",
				"title": "Reboot"
			},
			{
				"command": "viewDevices.ShutdownDevice",
				"title": "Shutdown"
			},
			{
				"command": "viewDevices.CopyToClipboard",
				"title": "Copy to Clipboard"
			},
			{
				"command": "viewDevices.CheckAllPackages",
				"title": "Check all packages",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "viewDevices.InstallationPackage",
				"title": "Package installation",
				"icon": {
					"light": "resources/light/setup.svg",
					"dark": "resources/dark/setup.svg"
				}
			},
			{
				"command": "viewDevices.UpgradePackage",
				"title": "Upgrade package"
			},
			{
				"command": "viewDevices.RemovePackage",
				"title": "Remove package"
			},
			{
				"command": "viewDevices.TestPackage",
				"title": "Test package"
			},
			{
				"command": "viewDevices.UpdateDTO",
				"title": "Update DTO",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "viewDevices.AddDTO",
				"title": "Add DTO",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "viewDevices.DeleteDTO",
				"title": "Delete DTO"
			},
			{
				"command": "viewDevices.EnableDTO",
				"title": "Enable DTO",
				"icon": {
					"light": "resources/light/include.svg",
					"dark": "resources/dark/include.svg"
				}
			},
			{
				"command": "viewDevices.DisableDTO",
				"title": "Disable DTO",
				"icon": {
					"light": "resources/light/exclude.svg",
					"dark": "resources/dark/exclude.svg"
				}
			},
			{
				"command": "viewDevices.DetectGpiochips",
				"title": "GPIO detect",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "viewDevices.OpenFolderSshKeys",
				"title": "Open folder with ssh keys"
			},
			{
				"command": "viewLaunchs.Add",
				"title": "Add Launch",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "viewLaunchs.Refresh",
				"title": "Refresh"
			},
			{
				"command": "viewLaunchs.Rename",
				"title": "Rename"
			},
			{
				"command": "viewLaunchs.Delete",
				"title": "Delete"
			},
			{
				"command": "viewLaunchs.Rebuild",
				"title": "Rebuild"
			},
			{
				"command": "viewLaunchs.GoToDevice",
				"title": "Go to device"
			},
			{
				"command": "viewLaunchs.AddEnviroment",
				"title": "Add Enviroment",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "viewLaunchs.RenameEnviroment",
				"title": "Rename"
			},
			{
				"command": "viewLaunchs.EditEnviroment",
				"title": "Edit"
			},
			{
				"command": "viewLaunchs.DeleteEnviroment",
				"title": "Delete"
			},
			{
				"command": "viewTemplates.ReloadTemplates",
				"title": "Reload templates"
			},
			{
				"command": "viewTemplates.OpenTemplateFolder",
				"title": "Open template folder"
			},
			{
				"command": "viewTemplates.RestoreSystemTemplates",
				"title": "Restore/upgrade system templates (offline)"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "bar-devices-explorer",
					"title": ".NET FastIoT",
					"icon": "assets/fastiot.svg"
				}
			]
		},
		"views": {
			"bar-devices-explorer": [
				{
					"id": "viewDevices",
					"name": "Devices",
					"contextualTitle": "Devices"
				},
				{
					"id": "viewLaunchs",
					"name": "Launchs",
					"contextualTitle": "Launchs"
				},
				{
					"id": "viewTemplates",
					"name": "Templates",
					"contextualTitle": "Templates",
					"visibility": "collapsed"
				}
			]
		},
		"menus": {
			"view/title": [
				{
					"command": "viewDevices.AddDevice",
					"when": "view == viewDevices",
					"group": "navigation"
				},
				{
					"command": "viewDevices.RefreshDevices",
					"when": "view == viewDevices"
				},
				{
					"command": "viewDevices.ExportDevices",
					"when": "view == viewDevices"
				},
				{
					"command": "viewDevices.ImportDevices",
					"when": "view == viewDevices"
				},
				{
					"command": "viewDevices.OpenFolderSshKeys",
					"when": "view == viewDevices"
				},
				{
					"command": "viewLaunchs.Add",
					"when": "view == viewLaunchs",
					"group": "navigation"
				},
				{
					"command": "viewLaunchs.Refresh",
					"when": "view == viewLaunchs"
				},
				{
					"command": "viewTemplates.ReloadTemplates",
					"when": "view == viewTemplates"
				},
				{
					"command": "viewTemplates.OpenTemplateFolder",
					"when": "view == viewTemplates"
				},
				{
					"command": "viewTemplates.RestoreSystemTemplates",
					"when": "view == viewTemplates"
				}
			],
			"view/item/context": [
				{
					"command": "viewDevices.RenameDevice",
					"when": "view == viewDevices && viewItem == iotdevice"
				},
				{
					"command": "viewDevices.DeleteDevice",
					"when": "view == viewDevices && viewItem == iotdevice"
				},
				{
					"command": "viewDevices.ConnectionTestDevice",
					"when": "view == viewDevices && viewItem == iotdevice"
				},
				{
					"command": "viewDevices.RebootDevice",
					"when": "view == viewDevices && viewItem == iotdevice"
				},
				{
					"command": "viewDevices.ShutdownDevice",
					"when": "view == viewDevices && viewItem == iotdevice"
				},
				{
					"command": "viewDevices.CopyToClipboard",
					"when": "view == viewDevices && viewItem == iotitemtree"
				},
				{
					"command": "viewDevices.CheckAllPackages",
					"when": "view == viewDevices && viewItem == iotpackages",
					"group": "inline"
				},
				{
					"command": "viewDevices.InstallationPackage",
					"when": "view == viewDevices && viewItem == iotpackages_not_installed",
					"group": "inline"
				},
				{
					"command": "viewDevices.UpgradePackage",
					"when": "view == viewDevices && viewItem == iotpackage_installed"
				},
				{
					"command": "viewDevices.RemovePackage",
					"when": "view == viewDevices && viewItem == iotpackage_installed"
				},
				{
					"command": "viewDevices.TestPackage",
					"when": "view == viewDevices && viewItem == iotpackage_installed"
				},
				{
					"command": "viewDevices.CopyToClipboard",
					"when": "view == viewDevices && viewItem == iotpackage_installed"
				},
				{
					"command": "viewDevices.UpdateDTO",
					"when": "view == viewDevices && viewItem == iotdtos",
					"group": "inline"
				},
				{
					"command": "viewDevices.AddDTO",
					"when": "view == viewDevices && viewItem == iotdtos",
					"group": "inline"
				},
				{
					"command": "viewDevices.DeleteDTO",
					"when": "view == viewDevices && viewItem == iotdto_off"
				},
				{
					"command": "viewDevices.EnableDTO",
					"when": "view == viewDevices && viewItem == iotdto_off",
					"group": "inline"
				},
				{
					"command": "viewDevices.DisableDTO",
					"when": "view == viewDevices && viewItem == iotdto_on",
					"group": "inline"
				},
				{
					"command": "viewDevices.DetectGpiochips",
					"when": "view == viewDevices && viewItem == iotgpios",
					"group": "inline"
				},
				{
					"command": "viewLaunchs.Rename",
					"when": "view == viewLaunchs && viewItem == iotlaunch"
				},
				{
					"command": "viewLaunchs.Delete",
					"when": "view == viewLaunchs && viewItem == iotlaunch"
				},
				{
					"command": "viewLaunchs.Rebuild",
					"when": "view == viewLaunchs && viewItem == iotlaunch"
				},
				{
					"command": "viewLaunchs.GoToDevice",
					"when": "view == viewLaunchs && viewItem == iotlaunch"
				},
				{
					"command": "viewLaunchs.AddEnviroment",
					"when": "view == viewLaunchs && viewItem == iotenviroments",
					"group": "inline"
				},
				{
					"command": "viewLaunchs.RenameEnviroment",
					"when": "view == viewLaunchs && viewItem == iotenviromentitem"
				},
				{
					"command": "viewLaunchs.EditEnviroment",
					"when": "view == viewLaunchs && viewItem == iotenviromentitem"
				},
				{
					"command": "viewLaunchs.DeleteEnviroment",
					"when": "view == viewLaunchs && viewItem == iotenviromentitem"
				},
				{
					"command": "viewDevices.CopyToClipboard",
					"when": "view == viewLaunchs && viewItem == iotenviromentitem"
				},
				{
					"command": "viewDevices.CopyToClipboard",
					"when": "view == viewLaunchs && viewItem == iotenviromentoption"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "viewDevices",
				"contents": "No devices added [learn more](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Getting-started.md#step-2---adding-a-device). \n[Add Device](command:viewDevices.AddDevice)"
			},
			{
				"view": "viewLaunchs",
				"contents": "No launchs [learn more](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Additional-materials.md#setting-up-an-existing-project-for-remote-debugging).  \n[Add Launch](command:viewLaunchs.Add)"
			},
			{
				"view": "viewTemplates",
				"contents": "[Create project](command:viewTemplates.CreateProject)  \n [About Project Templates](https://github.com/devdotnetorg/vscode-extension-dotnet-fastiot/blob/master/docs/Project-templates.md)."
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/adm-zip": "^0.5.0",
		"@types/fs-extra": "^9.0.13",
		"@types/glob": "^7.1.3",
		"@types/ip": "^1.1.0",
		"@types/mocha": "^8.2.2",
		"@types/node": "14.x",
		"@types/ssh2": "^0.5.49",
		"@types/tcp-port-used": "^1.0.1",
		"@types/uuid": "^8.3.1",
		"@types/vscode": "^1.59.0",
		"@typescript-eslint/eslint-plugin": "^4.26.0",
		"@typescript-eslint/parser": "^4.26.0",
		"eslint": "^7.27.0",
		"glob": "^7.1.7",
		"mocha": "^10.0.0",
		"typescript": "^4.3.2",
		"vscode-test": "^1.5.2"
	},
	"dependencies": {
		"@lolpants/pingman": "^1.0.6",
		"adm-zip": "^0.5.10",
		"axios": "^1.2.2",
		"compare-versions": "^6.0.0-rc.1",
		"fs-extra": "^11.1.0",
		"ip": "^1.1.8",
		"pingman": "^1.1.5",
		"ssh2": "^1.9.0",
		"ssh2-promise": "^1.0.3",
		"tcp-port-used": "^1.0.2",
		"utimes": "^5.1.1",
		"uuid": "^8.3.2",
		"xmldom": "^0.6.0",
		"xpath": "0.0.32",
		"yaml": "^2.2.0",
		"yaml-schema-validator-fork": "^0.2.0"
	}
}
